console.log('Server is starting...');

const express = require('express');
const cors = require('cors');
const mongoose = require("mongoose");
const path = require('path');

const app = express();
app.use(cors());
app.use(express.json());

// –î–ª—è –æ—Ç–¥–∞—á–∏ html-—Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ
app.use(express.static(__dirname));

const MONGO_URI = "mongodb+srv://greatstack:greatstack@health.t8k3jnw.mongodb.net/health?retryWrites=true&w=majority";

// 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
mongoose.connect(MONGO_URI)
  .then(() => {
    console.log("‚úÖ MongoDB connected successfully");

    // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É –ø–∞—Ü–∏–µ–Ω—Ç–∞
    const patientSchema = new mongoose.Schema({
      iin: { type: String, required: true, unique: true },
      firstName: String,
      lastName: String,
      middleName: String,
      email: String,
      birthDate: String,
      gender: String,
      diagnosis: String,
      rehabStage: String
    });

    const Patient = mongoose.model('Patient', patientSchema);

    // 3. –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ –ò–ò–ù
    app.get('/api/patient/:iin', async (req, res) => {
      try {
        const patient = await Patient.findOne({ iin: req.params.iin });
        if (!patient) {
          return res.status(404).json({ error: '–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        res.json(patient);
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞', details: err.message });
      }
    });

    // 4. –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞
    app.post('/api/patient', async (req, res) => {
      try {
        const existing = await Patient.findOne({ iin: req.body.iin });
        if (existing) {
          return res.status(400).json({ error: '–ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –ò–ò–ù —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        const newPatient = new Patient(req.body);
        await newPatient.save();
        res.status(201).json({ message: '–ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω', patient: newPatient });
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞', details: err.message });
      }
    });

    // 5. –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    app.post('/api/patients', async (req, res) => {
      const patients = req.body; // –û–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤

      if (!Array.isArray(patients)) {
        return res.status(400).json({ error: "–û–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤!" });
      }

      const results = [];
      for (const p of patients) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª—å
          const exists = await Patient.findOne({ iin: p.iin });
          if (exists) {
            results.push({ iin: p.iin, status: "error", message: "–ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –ò–ò–ù —É–∂–µ –µ—Å—Ç—å" });
            continue;
          }
          const patient = new Patient(p);
          await patient.save();
          results.push({ iin: p.iin, status: "success" });
        } catch (err) {
          results.push({ iin: p.iin, status: "error", message: err.message });
        }
      }
      res.json(results);
    });

    // 6. –û—Ç–¥–∞—á–∞ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü (–Ω–µ –≤–Ω—É—Ç—Ä—å –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π!)
    app.get('/add_patient', (req, res) => {
      res.sendFile(path.join(__dirname, 'add_patient.html'));
    });

    app.get('/add_patients', (req, res) => {
      res.sendFile(path.join(__dirname, 'add_patients.html'));
    });

    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    app.get('/', (req, res) => {
      res.send('‚úÖ Patient API is working');
    });

    // 8. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    const PORT = process.env.PORT || 10000;
    app.listen(PORT, () => {
      console.log(`üöÄ Server is running on port ${PORT}`);
    });

  })
  .catch(err => {
    console.error("‚ùå MongoDB connection error:", err);
  });
